<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed-Systems on Lloyd Moore</title>
    <link>https://lloydmoore.com/categories/distributed-systems/</link>
    <description>Recent content in Distributed-Systems on Lloyd Moore</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lloydmoore.com/categories/distributed-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Distributed Event Log with SQLite: When Simple Beats Complex</title>
      <link>https://lloydmoore.com/posts/2025-09-03-building-distributed-event-log-with-sqlite/</link>
      <pubDate>Wed, 03 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-09-03-building-distributed-event-log-with-sqlite/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;The best code is no code. The second-best code is code so simple that deletion becomes obvious.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;After years of wrestling with Apache Kafka, Redis Streams, and various message queue solutions, I&amp;rsquo;ve come to appreciate an uncomfortable truth: &lt;strong&gt;most event processing problems don&amp;rsquo;t need the complexity we throw at them.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;True story: this solution is running in production, and has been for years &amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-multi-database-event-replication&#34;&gt;The Problem: Multi-Database Event Replication&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you are building a financial system where every transaction needs to be recorded across multiple database replicas for compliance. The events must be:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
