<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Lloyd Moore</title>
    <link>https://lloydmoore.com/categories/architecture/</link>
    <description>Recent content in Architecture on Lloyd Moore</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lloydmoore.com/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Distributed Event Log with SQLite: When Simple Beats Complex</title>
      <link>https://lloydmoore.com/posts/2025-09-03-building-distributed-event-log-with-sqlite/</link>
      <pubDate>Wed, 03 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-09-03-building-distributed-event-log-with-sqlite/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;The best code is no code. The second-best code is code so simple that deletion becomes obvious.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;After years of wrestling with Apache Kafka, Redis Streams, and various message queue solutions, I&amp;rsquo;ve come to appreciate an uncomfortable truth: &lt;strong&gt;most event processing problems don&amp;rsquo;t need the complexity we throw at them.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;True story: this solution is running in production, and has been for years &amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-multi-database-event-replication&#34;&gt;The Problem: Multi-Database Event Replication&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you are building a financial system where every transaction needs to be recorded across multiple database replicas for compliance. The events must be:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How TLA&#43; Formal Verification Caught a Production Bug Before It Shipped</title>
      <link>https://lloydmoore.com/posts/2025-08-28-tlaplus-not-just-concurrency/</link>
      <pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-08-28-tlaplus-not-just-concurrency/</guid>
      <description>&lt;p&gt;&lt;em&gt;How we caught a production bug before it shipped using formal verification&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I tried TLA+ formal verification on our recruitment system. It started as an experiment. It ended up saving us from a nasty production bug.&lt;/p&gt;&#xA;&lt;p&gt;The verification caught a race condition that would have corrupted our data. Our code reviews missed it. Our unit tests missed it. Our integration tests missed it too.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s how mathematical proof succeeded where traditional testing failed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DuckDB: The Surprising Swiss Army Knife of Data Processing</title>
      <link>https://lloydmoore.com/posts/2025-07-14-duckdb-the-surprising-swiss-army-knife-of-data/</link>
      <pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-07-14-duckdb-the-surprising-swiss-army-knife-of-data/</guid>
      <description>&lt;h1 id=&#34;duckdb-making-the-impossible-simple&#34;&gt;DuckDB: Making the Impossible Simple&lt;/h1&gt;&#xA;&lt;p&gt;Last week, someone asked to analyze 50GB of CSV files scattered across S3. Five years ago, this would&amp;rsquo;ve meant spinning up a Spark cluster. Today? One line of DuckDB SQL.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; customer_id, &lt;span style=&#34;color:#66d9ef&#34;&gt;SUM&lt;/span&gt;(amount) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; total_spent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; read_csv_auto(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s3://mybucket/transactions/*.csv&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; transaction_date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2025-01-01&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; customer_id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; total_spent &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No cluster. No downloads. No loading. Just query the files where they sit.&lt;/p&gt;&#xA;&lt;p&gt;This is DuckDB&amp;rsquo;s superpower: it makes difficult data tasks surprisingly simple.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLite and PostgreSQL: The Right Database for 99% of Use Cases</title>
      <link>https://lloydmoore.com/posts/2025-07-06-sqlite-postgresql-right-database-for-most-use-cases/</link>
      <pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-07-06-sqlite-postgresql-right-database-for-most-use-cases/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;The best tool for the job is the one you already know how to use properly.&amp;rdquo; - Ancient Engineering Wisdom&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;You face endless database choices today. NoSQL, NewSQL, graph databases, time-series databases â€“ they all promise to solve your problems. But here&amp;rsquo;s the truth: &lt;strong&gt;you only need SQLite or PostgreSQL for 99% of applications&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-power-duo-sqlite-and-postgresql&#34;&gt;The Power Duo: SQLite and PostgreSQL&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sqlite-the-embedded-powerhouse&#34;&gt;SQLite: The Embedded Powerhouse&lt;/h3&gt;&#xA;&lt;p&gt;Don&amp;rsquo;t dismiss SQLite as a &amp;ldquo;toy database.&amp;rdquo; It&amp;rsquo;s the world&amp;rsquo;s most deployed database engine. Billions of devices run SQLite right now. Here&amp;rsquo;s when you should choose it:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Smart Tokenization Platforms Turn Regulation Into a Competitive Moat</title>
      <link>https://lloydmoore.com/posts/2025-01-30-tokenization-platforms-regulation-as-competitive-advantage/</link>
      <pubDate>Thu, 30 Jan 2025 10:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-01-30-tokenization-platforms-regulation-as-competitive-advantage/</guid>
      <description>&lt;p&gt;I just finished a four-week review of twelve tokenization platforms. We conducted architecture reviews, compliance audits, and technical evaluations. One lesson stands out:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;The frontrunners treat SEC and FINRA rules as design specifications, not handcuffs.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-real-moat-in-tokenization&#34;&gt;The Real Moat in Tokenization&lt;/h2&gt;&#xA;&lt;p&gt;Winners don&amp;rsquo;t compete on blockchain novelty or clever token mechanisms. They build something far more defensible:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Licensed broker-dealers integrated into the platform&lt;/li&gt;&#xA;&lt;li&gt;Registered transfer agents working seamlessly with smart contracts&lt;/li&gt;&#xA;&lt;li&gt;Legal teams that understand both code and compliance&lt;/li&gt;&#xA;&lt;li&gt;Technical architecture that treats regulatory requirements as first-class features&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This separates platforms that will survive from those that won&amp;rsquo;t.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When &#39;Boring&#39; Technology is the Best Choice</title>
      <link>https://lloydmoore.com/posts/2025-01-30-when-boring-tech-is-best/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-01-30-when-boring-tech-is-best/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Nobody ever got fired for buying IBM.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Replace IBM with Kubernetes in 2025. The saying still rings true. I&amp;rsquo;ve scaled engineering teams from 10 to 187 people. Here&amp;rsquo;s what I learned: &lt;strong&gt;the best technology solves your problem with minimal friction. It&amp;rsquo;s not the most popular or hyped.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-messy-reality-of-multi-cloud-architecture&#34;&gt;The Messy Reality of Multi-Cloud Architecture&lt;/h2&gt;&#xA;&lt;p&gt;We faced a classic challenge recently. We needed to deploy one application across Google Cloud Platform, AWS, and bare-metal racks. The overlay network had to stretch across all three environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQL Will Do, or, You Don&#39;t Need Kafka</title>
      <link>https://lloydmoore.com/posts/2025-07-07-just-postgresql/</link>
      <pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-07-07-just-postgresql/</guid>
      <description>&lt;h1 id=&#34;you-dont-need-kafka-postgresql-will-do-just-fine&#34;&gt;You Don&amp;rsquo;t Need Kafka (PostgreSQL Will Do Just Fine)&lt;/h1&gt;&#xA;&lt;p&gt;Every few months, someone on your team suggests adding Kafka. &amp;ldquo;We need real-time event streaming,&amp;rdquo; they say. &amp;ldquo;We need to decouple our services.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;Stop. Before you spin up a three-node Kafka cluster, consider PostgreSQL. It can handle most pub-sub use cases perfectly well. You&amp;rsquo;ve probably already got it running.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;Your application grows. Different parts need to know when things happen. The order service needs to tell the inventory service about new orders. The user service needs to notify the email service about registrations.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
