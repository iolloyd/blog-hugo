<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases on Lloyd Moore</title>
    <link>https://lloydmoore.com/categories/databases/</link>
    <description>Recent content in Databases on Lloyd Moore</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lloydmoore.com/categories/databases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Distributed Event Log with SQLite: When Simple Beats Complex</title>
      <link>https://lloydmoore.com/posts/2025-09-03-building-distributed-event-log-with-sqlite/</link>
      <pubDate>Wed, 03 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-09-03-building-distributed-event-log-with-sqlite/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;The best code is no code. The second-best code is code so simple that deletion becomes obvious.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;After years of wrestling with Apache Kafka, Redis Streams, and various message queue solutions, I&amp;rsquo;ve come to appreciate an uncomfortable truth: &lt;strong&gt;most event processing problems don&amp;rsquo;t need the complexity we throw at them.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;True story: this solution is running in production, and has been for years &amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-multi-database-event-replication&#34;&gt;The Problem: Multi-Database Event Replication&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you are building a financial system where every transaction needs to be recorded across multiple database replicas for compliance. The events must be:&lt;/p&gt;</description>
    </item>
    <item>
      <title>DuckDB: The Surprising Swiss Army Knife of Data Processing</title>
      <link>https://lloydmoore.com/posts/2025-07-14-duckdb-the-surprising-swiss-army-knife-of-data/</link>
      <pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-07-14-duckdb-the-surprising-swiss-army-knife-of-data/</guid>
      <description>&lt;h1 id=&#34;duckdb-making-the-impossible-simple&#34;&gt;DuckDB: Making the Impossible Simple&lt;/h1&gt;&#xA;&lt;p&gt;Last week, someone asked to analyze 50GB of CSV files scattered across S3. Five years ago, this would&amp;rsquo;ve meant spinning up a Spark cluster. Today? One line of DuckDB SQL.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; customer_id, &lt;span style=&#34;color:#66d9ef&#34;&gt;SUM&lt;/span&gt;(amount) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; total_spent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; read_csv_auto(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s3://mybucket/transactions/*.csv&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; transaction_date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2025-01-01&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; customer_id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; total_spent &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No cluster. No downloads. No loading. Just query the files where they sit.&lt;/p&gt;&#xA;&lt;p&gt;This is DuckDB&amp;rsquo;s superpower: it makes difficult data tasks surprisingly simple.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLite and PostgreSQL: The Right Database for 99% of Use Cases</title>
      <link>https://lloydmoore.com/posts/2025-07-06-sqlite-postgresql-right-database-for-most-use-cases/</link>
      <pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-07-06-sqlite-postgresql-right-database-for-most-use-cases/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;The best tool for the job is the one you already know how to use properly.&amp;rdquo; - Ancient Engineering Wisdom&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;You face endless database choices today. NoSQL, NewSQL, graph databases, time-series databases â€“ they all promise to solve your problems. But here&amp;rsquo;s the truth: &lt;strong&gt;you only need SQLite or PostgreSQL for 99% of applications&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-power-duo-sqlite-and-postgresql&#34;&gt;The Power Duo: SQLite and PostgreSQL&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sqlite-the-embedded-powerhouse&#34;&gt;SQLite: The Embedded Powerhouse&lt;/h3&gt;&#xA;&lt;p&gt;Don&amp;rsquo;t dismiss SQLite as a &amp;ldquo;toy database.&amp;rdquo; It&amp;rsquo;s the world&amp;rsquo;s most deployed database engine. Billions of devices run SQLite right now. Here&amp;rsquo;s when you should choose it:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
