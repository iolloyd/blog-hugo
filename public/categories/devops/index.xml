<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Lloyd Moore</title>
    <link>https://lloydmoore.com/categories/devops/</link>
    <description>Recent content in Devops on Lloyd Moore</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lloydmoore.com/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Security Revolution: Why Tailscale and Teleport Are Changing Everything</title>
      <link>https://lloydmoore.com/posts/2025-09-08-tailscale-teleport-security-article/</link>
      <pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-09-08-tailscale-teleport-security-article/</guid>
      <description>&lt;h1 id=&#34;the-security-revolution-why-tailscale-and-teleport-are-changing-everything&#34;&gt;The Security Revolution: Why Tailscale and Teleport Are Changing Everything&lt;/h1&gt;&#xA;&lt;p&gt;Your security setup is broken. Not a little bit broken – completely broken.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re still using traditional VPNs, static passwords, and shared SSH keys, you&amp;rsquo;re fighting yesterday&amp;rsquo;s battles with stone-age tools. Meanwhile, attackers are using modern techniques to walk through your defenses like they&amp;rsquo;re not even there.&lt;/p&gt;&#xA;&lt;p&gt;The good news? There&amp;rsquo;s a better way. Two tools – Tailscale and Teleport – are quietly revolutionizing how smart organizations approach security. Here&amp;rsquo;s why they matter and how they&amp;rsquo;ll transform your infrastructure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Nix Beats Docker for Local Development (And Makes It Better in Production)</title>
      <link>https://lloydmoore.com/posts/2025-09-04-nix-vs-docker-development-environments/</link>
      <pubDate>Thu, 04 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-09-04-nix-vs-docker-development-environments/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;It works on my machine&amp;rdquo; is supposed to be a problem that containers solved. Yet here we are, still debugging environment differences between developers who all claim to be running &amp;rsquo;the same&amp;rsquo; Docker setup.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;After leading development teams through countless Docker-induced headaches - from 90-second startup times that kill flow state to mysterious dependency conflicts that containers were meant to eliminate, I discovered Nix. It isn&amp;rsquo;t a replacement for everything Docker does. It is, however, a superior solution for what is needed in local development environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When &#39;Boring&#39; Technology is the Best Choice</title>
      <link>https://lloydmoore.com/posts/2025-01-30-when-boring-tech-is-best/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-01-30-when-boring-tech-is-best/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Nobody ever got fired for buying IBM.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Replace IBM with Kubernetes in 2025. The saying still rings true. I&amp;rsquo;ve scaled engineering teams from 10 to 187 people. Here&amp;rsquo;s what I learned: &lt;strong&gt;the best technology solves your problem with minimal friction. It&amp;rsquo;s not the most popular or hyped.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-messy-reality-of-multi-cloud-architecture&#34;&gt;The Messy Reality of Multi-Cloud Architecture&lt;/h2&gt;&#xA;&lt;p&gt;We faced a classic challenge recently. We needed to deploy one application across Google Cloud Platform, AWS, and bare-metal racks. The overlay network had to stretch across all three environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Makefiles: Your Secret Weapon for Self-Documenting Development Environments</title>
      <link>https://lloydmoore.com/posts/2025-01-03-makefile-as-development-environment/</link>
      <pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://lloydmoore.com/posts/2025-01-03-makefile-as-development-environment/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;Hey, how do I run the tests?&amp;rdquo;&#xA;&amp;ldquo;What&amp;rsquo;s the command to deploy to staging?&amp;rdquo;&lt;br&gt;&#xA;&amp;ldquo;How do I reset the local database?&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;You&amp;rsquo;ve heard these questions before. Every new developer asks them. You need a better way to document your workflow.&lt;/p&gt;&#xA;&lt;p&gt;The answer is the humble Makefile. Not for compiling C code, but as your team&amp;rsquo;s command center.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-with-readme-driven-development&#34;&gt;The Problem with README-Driven Development&lt;/h2&gt;&#xA;&lt;p&gt;You join a new project. You open the README. You find a wall of commands scattered everywhere.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
